name: Release

# on: 
#     push:
#         tags:
#             - v*
on: push

jobs:
  # win:
  #   runs-on: windows-latest

  #   steps:
  #   - uses: actions/checkout@v1
  #   - name: checkout
  #     run: git checkout $("${{ github.ref }}" | sed -r 's .*/.*/(.*) \1 g')
  #   - name: install
  #     run: |
  #       set-executionpolicy remotesigned -s cu
  #       iex (new-object net.webclient).downloadstring('https://get.scoop.sh')
  #       scoop install sudo curl 7zip aws erlang
  #       $env:path + ";" + $env:USERPROFILE + "\scoop\shims"
  #       make emqx
  #       Compress-Archive -Path _build/emqx/rel/emqx -DestinationPath _build/emqx/rel/emqx-windows-develop.zip
  #       sudo ./_build/emqx/rel/emqx/bin/emqx start
  #       sudo ./_build/emqx/rel/emqx/bin/emqx stop
  #   - uses: actions/upload-artifact@v1
  #     with:
  #       name: emqx-windows
  #       path: _build/emqx/rel/emqx
    
  # mac:
  #   runs-on: macos-latest

  #   steps:
  #   - uses: actions/checkout@v1
  #   - name: prepare
  #     run: |
  #       /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
  #       brew install curl zip unzip gnu-sed erlang
  #       echo "/usr/local/bin:$PATH" >> ~/.bashrc
  #   - name: instsall aws
  #     run: |
  #       curl "https://d1vvhvl2y92vvt.cloudfront.net/awscli-exe-macos.zip" -o "awscliv2.zip"
  #       unzip awscliv2.zip
  #       sudo ./aws/install
  #   - name: build
  #     run: |
  #       refs=$(echo ${{ github.ref }} | gsed -r  "s .*/.*/(.*) \1 g")
  #       EMQX_DEPS_DEFAULT_VSN=$refs make emqx
  #       ./_build/emqx/rel/emqx/bin/emqx start
  #       ./_build/emqx/rel/emqx/bin/emqx stop
  #   - uses: actions/upload-artifact@v1
  #     with:
  #       name: emqx-macosx
  #       path: _build/emqx/rel/emqx

  linux:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        os: 
          - ubuntu18.04 
          - ubuntu16.04 
          - ubuntu14.04 
          - debian10
          - debian9 
          - debian8 
          - opensuse
          - centos7 
          - centos6
          - raspbian10
          - raspbian9
          - raspbian8
  
    steps:
    - uses: actions/checkout@v1
    - name: build emqx packages
      env:
        ERL_OTP: erl22.1
      run: |
        sudo docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
        sudo docker run -i --name ${{ matrix.os }}-build -e EMQX_DEPS_DEFAULT_VSN=v4.0-rc.3 -e SYSTEM=${{ matrix.os }} -v $(pwd):/emqx-rel emqx/build-env:$ERL_OTP-${{ matrix.os }} sh -c "cd /emqx-rel/.github/workflows/release; if [ ! -z $(echo $SYSTEM | grep -o raspbian) ];then EMQX_NAME=emqx ./build.sh; fi; EMQX_NAME=emqx-edge ./build.sh"
    - uses: actions/upload-artifact@v1
      with:
        name: emqx-${{ matrix.os }}
        path: _packages

  # raspbian:
  #   runs-on: ubuntu-latest

  #   strategy:
  #     matrix:
  #       os: 
  #         - raspbian10
  #         - raspbian9
  #         - raspbian8
    
  #   steps:
  #   - uses: actions/checkout@v1
  #   - name: build emqx packages
  #     env:
  #       ERL_OTP: erl22.1
  #     run: |
  #       if [ ${{ matrix.os }} == 'raspbian8' ]; then sudo docker pull emqx/build-env@sha256:ed02c6eb379d963c9b696f5703d6e0fc3ad0c5ab1f872e5702246bad9167f824; sudo docker tag emqx/build-env@sha256:ed02c6eb379d963c9b696f5703d6e0fc3ad0c5ab1f872e5702246bad9167f824 emqx/build-env:raspbian8; fi
  #       if [ ${{ matrix.os }} == 'raspbian9' ]; then sudo docker pull emqx/build-env@sha256:f8200d7b98f6af457300e7edc74537b529cc81b77c37d1c37434fe5822b23263; sudo docker tag emqx/build-env@sha256:f8200d7b98f6af457300e7edc74537b529cc81b77c37d1c37434fe5822b23263 emqx/build-env:raspbian9; fi
  #       if [ ${{ matrix.os }} == 'raspbian10' ];then sudo docker pull emqx/build-env@sha256:af59d0ae396d22536d84cab763b828318ef721f6f1cd693ecf0a9df8046e9f19; sudo docker tag emqx/build-env@sha256:af59d0ae396d22536d84cab763b828318ef721f6f1cd693ecf0a9df8046e9f19 emqx/build-env:raspbian10; fi
  #       sudo docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
  #       sudo docker run -i --name ${{ matrix.os }}-build -e EMQX_DEPS_DEFAULT_VSN=$(echo ${{ github.ref }} | gsed -r  "s .*/.*/(.*) \1 g") -e SYSTEM=${{ matrix.os }} -v $(pwd):/emqx-rel emqx/build-env:$ERL_OTP-${{ matrix.os }} sh -c "cd /emqx-rel/.github/workflows/release; EMQX_NAME=emqx-edge ./build.sh"
  #   - uses: actions/upload-artifact@v1
  #     with:
  #       name: emqx-${{ matrix.os }}
  #       path: _packages

  docker:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        arch:
          - [amd64, x86_64]
          - [arm64v8, aarch64]
          - [arm32v7, arm]
          - [i386, i386]
          - [s390x, s390x]

    steps:
    - uses: actions/checkout@v1
      with: 
        path: emqx-rel
    - uses: actions/checkout@v2
      with:
        repository: emqx/emqx-integration-test
        token: ${{ secrets.AccessToken }} 
        path: emqx-integration-test
    - name: build emqx docker image
      env:
        ARCH: ${{ matrix.arch[0] }}
        QEMU_ARCH: ${{ matrix.arch[1] }}
      run: |
        sudo docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
        sudo EMQX_DEPS_DEFAULT_VSN=$(echo ${{ github.ref }} | gsed -r  "s .*/.*/(.*) \1 g") ARCH=${{ matrix.arch[0] }} QEMU_ARCH=${{ matrix.arch[1] }} TARGET=emqx/emqx make -C emqx-rel/deploy/docker 
        sudo EMQX_DEPS_DEFAULT_VSN=$(echo ${{ github.ref }} | gsed -r  "s .*/.*/(.*) \1 g") ARCH=${{ matrix.arch[0] }} QEMU_ARCH=${{ matrix.arch[1] }} TARGET=emqx/emqx make -C emqx-rel/deploy/docker save
        sudo EMQX_DEPS_DEFAULT_VSN=$(echo ${{ github.ref }} | gsed -r  "s .*/.*/(.*) \1 g") ARCH=${{ matrix.arch[0] }} QEMU_ARCH=${{ matrix.arch[1] }} TARGET=emqx/emqx-edge make -C emqx-rel/deploy/docker 
        sudo EMQX_DEPS_DEFAULT_VSN=$(echo ${{ github.ref }} | gsed -r  "s .*/.*/(.*) \1 g") ARCH=${{ matrix.arch[0] }} QEMU_ARCH=${{ matrix.arch[1] }} TARGET=emqx/emqx-edge make -C emqx-rel/deploy/docker save
    - name: docker cluster test
      if: $matrix.arch[0] == amd64
      run: |
        sudo TARGET=emqx/emqx EMQX_DEPS_DEFAULT_VSN=$(echo ${{ github.ref }} | gsed -r  "s .*/.*/(.*) \1 g") PAHO_BRANCH="develop-4.0" make -C emqx-integration-test/paho-test cluster_test
        sudo TARGET=emqx/emqx-edge EMQX_DEPS_DEFAULT_VSN=$(echo ${{ github.ref }} | gsed -r  "s .*/.*/(.*) \1 g") PAHO_BRANCH="develop-4.0" make -C emqx-integration-test/paho-test cluster_test
    - uses: actions/upload-artifact@v1
      with:
        name: emqx-docker-${{ matrix.arch[0] }}
        path: _packages