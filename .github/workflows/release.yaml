name: Release

# on: 
#     push:
#         tags:
#             - v*
on: push

jobs:
  win:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v1
    - name: checkout
      run: git checkout $("${{ github.ref }}" | sed -r 's .*/.*/(.*) \1 g')
    - name: install
      run: |
        set-executionpolicy remotesigned -s cu
        iex (new-object net.webclient).downloadstring('https://get.scoop.sh')
        scoop install sudo curl 7zip aws erlang
        $env:path + ";" + $env:USERPROFILE + "\scoop\shims"
        make emqx
        Compress-Archive -Path _build/emqx/rel/emqx -DestinationPath _build/emqx/rel/emqx-windows-develop.zip
        sudo ./_build/emqx/rel/emqx/bin/emqx start
        sudo ./_build/emqx/rel/emqx/bin/emqx stop
    - uses: actions/upload-artifact@v1
      with:
        name: emqx-windows
        path: _build/emqx/rel/emqx
    
  mac:
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v1
    - name: prepare
      run: |
        /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
        brew install curl zip unzip gnu-sed erlang
        echo "/usr/local/bin:$PATH" >> ~/.bashrc
    - name: instsall aws
      run: |
        curl "https://d1vvhvl2y92vvt.cloudfront.net/awscli-exe-macos.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        sudo ./aws/install
    - name: build
      run: |
        refs=$(echo ${{ github.ref }} | gsed -r  "s .*/.*/(.*) \1 g")
        EMQX_DEPS_DEFAULT_VSN=$refs make emqx
        ./_build/emqx/rel/emqx/bin/emqx start
        ./_build/emqx/rel/emqx/bin/emqx stop
    - uses: actions/upload-artifact@v1
      with:
        name: emqx-macosx
        path: _build/emqx/rel/emqx

  linux:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        os: 
          - ubuntu18.04 
          - ubuntu16.04 
          - ubuntu14.04 
          - debian10
          - debian9 
          - debian8 
          - opensuse
          - centos7 
          - centos6
  
    steps:
    - uses: actions/checkout@v2
    - name: build emqx
      env:
        EMQX_DEPS_DEFAULT_VSN: develop
        ERL_OTP: erl22.1
      run: 
        sudo docker run -i --name ${{ matrix.os }}-build -e EMQX_DEPS_DEFAULT_VSN=$EMQX_DEPS_DEFAULT_VSN -e SYSTEM=${{ matrix.os }} -v $(pwd):/emqx-rel emqx/build-env:$ERL_OTP-${{ matrix.os }} sh -c "cd /emqx-rel/.github/workflows/release; if [ ! -z $(echo $SYSTEM | grep -o raspbian) ];then EMQX_NAME=emqx ./build.sh; fi; EMQX_NAME=emqx-edge ./build.sh"
    - uses: actions/upload-artifact@v1
      with:
        name: emqx-${{ matrix.os }}
        path: _packages

  # raspbian:
  #   runs-on: self-hosted

  #   strategy:
  #     matrix:
  #       os: 
  #         - raspbian10
  #         - raspbian9
  #         - raspbian8

  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: build emqx
  #     env:
  #       EMQX_DEPS_DEFAULT_VSN: develop
  #       ERL_OTP: erl22.1
  #     run: |
  #       sudo docker run -i --name ${{ matrix.os }}-build -e EMQX_DEPS_DEFAULT_VSN=$EMQX_DEPS_DEFAULT_VSN -e SYSTEM=${{ matrix.os }} -v $(pwd):/emqx-rel emqx/build-env:$ERL_OTP-${{ matrix.os }} sh -c "cd /emqx-rel/.github/workflows/release; if [ -z $(echo $SYSTEM | grep -o raspbian) ];then export EMQX_NAME=emqx; ./build.sh; fi; export EMQX_NAME=emqx-edge; ./build.sh"
  #   - uses: actions/upload-artifact@v1
  #     with:
  #       name: emqx-${{ matrix.os }}
  #       path: _packages